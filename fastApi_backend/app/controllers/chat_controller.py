from typing import List, Optional
from fastapi import HTTPException
from datetime import datetime
from ..models.chat_schemas import ChatThread, Message
from ..utils.mongodb import MongoDB
from .model_controller import ModelController

class ChatController:
    COLLECTION_NAME = "chat_threads"
    
    @staticmethod
    async def get_thread(thread_id: str) -> ChatThread:
        """Get a chat thread by its ID"""
        collection = await MongoDB.get_collection(ChatController.COLLECTION_NAME)
        thread_data = await collection.find_one({"id": thread_id})
        
        if not thread_data:
            raise HTTPException(status_code=404, detail="Chat thread not found")
            
        return ChatThread(**thread_data)
    
    @staticmethod
    async def get_all_threads(user_id: Optional[str] = None, limit: int = 20) -> List[ChatThread]:
        """Get all chat threads for a user, or all threads if no user_id is provided"""
        collection = await MongoDB.get_collection(ChatController.COLLECTION_NAME)
        
        # Filter by user_id if provided
        filter_query = {"user_id": user_id} if user_id else {}
        
        # Get threads sorted by updated_at in descending order
        cursor = collection.find(filter_query).sort("updated_at", -1).limit(limit)
        threads = [ChatThread(**thread) async for thread in cursor]
        
        return threads
    
    @staticmethod
    async def create_thread(message: str, model: str, user_id: Optional[str] = None) -> ChatThread:
        """Create a new chat thread with an initial user message and model response"""
        # Create user message
        user_message = Message(role="user", content=message)
        
        # Get response from the model
        response = await ModelController.chat(model, message)
        
        # Create assistant message
        assistant_message = Message(
            role="assistant",
            content=response["response"]
        )
        
        # Create new chat thread
        thread = ChatThread(
            messages=[user_message, assistant_message],
            model=model,
            user_id=user_id,
            title=message[:30] + "..." if len(message) > 30 else message  # Use first part of message as title
        )
        
        # Save to database
        collection = await MongoDB.get_collection(ChatController.COLLECTION_NAME)
        await collection.insert_one(thread.dict())
        
        return thread
    
    @staticmethod
    async def add_message_to_thread(
        thread_id: str, 
        message: str, 
        model: str
    ) -> ChatThread:
        """Add a user message and get an AI response in an existing thread"""
        # Get the existing thread
        thread = await ChatController.get_thread(thread_id)
        
        # Create user message
        user_message = Message(role="user", content=message)
        thread.messages.append(user_message)
        
        # Get response from the model
        # Include all previous messages for context (format them appropriately for the model)
        context = "\n".join([f"{msg.role}: {msg.content}" for msg in thread.messages])
        response = await ModelController.chat(model, context)
        
        # Create assistant message
        assistant_message = Message(
            role="assistant",
            content=response["response"]
        )
        thread.messages.append(assistant_message)
        
        # Update timestamp
        thread.updated_at = datetime.utcnow()
        
        # Save to database
        collection = await MongoDB.get_collection(ChatController.COLLECTION_NAME)
        await collection.update_one(
            {"id": thread_id},
            {"$set": thread.dict()}
        )
        
        return thread
    
    @staticmethod
    async def delete_thread(thread_id: str) -> bool:
        """Delete a chat thread"""
        collection = await MongoDB.get_collection(ChatController.COLLECTION_NAME)
        result = await collection.delete_one({"id": thread_id})
        
        if result.deleted_count == 0:
            raise HTTPException(status_code=404, detail="Chat thread not found")
            
        return True
        
# Generated by Copilot
