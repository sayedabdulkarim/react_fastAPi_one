from fastapi import APIRouter, HTTPException, Query
from typing import List, Optional

from ..controllers.chat_controller import ChatController
from ..models.chat_schemas import ChatThread, ChatRequest, ChatResponse, Message

router = APIRouter()

@router.post("/chat", response_model=ChatThread)
async def chat(request: ChatRequest):
    """
    Process a chat message. Creates a new thread if thread_id is not provided.
    Returns the updated or created chat thread.
    """
    try:
        if request.thread_id:
            # Continue an existing thread
            thread = await ChatController.add_message_to_thread(
                thread_id=request.thread_id,
                message=request.message,
                model=request.model
            )
        else:
            # Create a new thread
            thread = await ChatController.create_thread(
                message=request.message,
                model=request.model,
                user_id=request.user_id
            )
        
        return thread
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/chat/threads", response_model=List[ChatThread])
async def get_chat_threads(
    user_id: Optional[str] = None,
    limit: int = Query(20, ge=1, le=100)
):
    """Get all chat threads for a user, or all threads if no user_id is provided"""
    try:
        return await ChatController.get_all_threads(user_id, limit)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/chat/thread/{thread_id}", response_model=ChatThread)
async def get_chat_thread(thread_id: str):
    """Get a specific chat thread by ID"""
    try:
        return await ChatController.get_thread(thread_id)
    except Exception as e:
        if "not found" in str(e).lower():
            raise HTTPException(status_code=404, detail="Chat thread not found")
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/chat/thread/{thread_id}", response_model=dict)
async def delete_chat_thread(thread_id: str):
    """Delete a specific chat thread by ID"""
    try:
        success = await ChatController.delete_thread(thread_id)
        return {"success": success, "message": "Thread deleted successfully"}
    except Exception as e:
        if "not found" in str(e).lower():
            raise HTTPException(status_code=404, detail="Chat thread not found")
        raise HTTPException(status_code=500, detail=str(e))

# Generated by Copilot
