import motor.motor_asyncio
from pymongo.errors import ServerSelectionTimeoutError
from fastapi import HTTPException
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class MongoDB:
    client = None
    db = None

    @classmethod
    async def connect_to_mongo(cls):
        """Connect to MongoDB and initialize the database client"""
        try:
            mongo_uri = os.getenv("MONGO_URI")
            db_name = os.getenv("MONGODB_DB_NAME", "llm_chat_db")
            
            if not mongo_uri:
                raise ValueError("MONGO_URI environment variable is not set")
                
            print(f"Connecting to MongoDB at {mongo_uri}", flush=True)
            cls.client = motor.motor_asyncio.AsyncIOMotorClient(
                mongo_uri,
                serverSelectionTimeoutMS=5000
            )
            
            # Test the connection
            await cls.client.server_info()
            
            cls.db = cls.client[db_name]
            print(f"Connected to MongoDB database: {db_name}", flush=True)
            
        except ServerSelectionTimeoutError:
            raise HTTPException(
                status_code=500,
                detail="Failed to connect to MongoDB. Please check your connection string and network."
            )
        except Exception as e:
            raise HTTPException(
                status_code=500, 
                detail=f"MongoDB connection error: {str(e)}"
            )

    @classmethod
    async def close_mongo_connection(cls):
        """Close MongoDB connection"""
        if cls.client:
            cls.client.close()
            print("MongoDB connection closed", flush=True)

    @classmethod
    async def get_collection(cls, collection_name):
        """Get a collection from the database"""
        if not cls.db:
            await cls.connect_to_mongo()
        return cls.db[collection_name]

# Generated by Copilot
